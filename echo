echo "Building JSKit.framework..."

# Sets the target folders and the final framework product.
FMK_NAME=JSKit
FMK_VERSION=A

# Working dir will be deleted after the framework creation.
BUILD_DIR="${SRCROOT}/build"
PRODUCT_DIR="${SRCROOT}/Products"

# Install dir will be the final output to the framework.
# The following line create it in the root folder of the current project.
INSTALL_DIR=${PRODUCT_DIR}/${FMK_NAME}.framework

DEVICE_DIR=${BUILD_DIR}/"${CONFIGURATION}"-iphoneos/${FMK_NAME}.framework
SIMULATOR_DIR=${BUILD_DIR}/"${CONFIGURATION}"-iphonesimulator/${FMK_NAME}.framework

rm -rf "${BUILD_DIR}"
rm -rf "${PRODUCT_DIR}"

# Building both architectures.
xcodebuild -configuration "${CONFIGURATION}" -target "${FMK_NAME}" -sdk iphoneos
xcodebuild -configuration "${CONFIGURATION}" -target "${FMK_NAME}" -sdk iphonesimulator

# Cleaning the oldest.
if [ -d "${INSTALL_DIR}" ]
then
echo "removing old framework"
echo "${INSTALL_DIR}"
rm -rf "${INSTALL_DIR}"
fi

# Creates and renews the final product folder.
mkdir -p "${INSTALL_DIR}"
mkdir -p "${INSTALL_DIR}/Versions"
mkdir -p "${INSTALL_DIR}/Versions/${FMK_VERSION}"
mkdir -p "${INSTALL_DIR}/Versions/${FMK_VERSION}/Resources"
mkdir -p "${INSTALL_DIR}/Versions/${FMK_VERSION}/Headers"

# Creates the internal links.
# It MUST uses relative path, otherwise will not work when the folder is copied/moved.
ln -s "${FMK_VERSION}" "${INSTALL_DIR}/Versions/Current"
ln -s "Versions/Current/Headers" "${INSTALL_DIR}/Headers"
ln -s "Versions/Current/Resources" "${INSTALL_DIR}/Resources"
ln -s "Versions/Current/${FMK_NAME}" "${INSTALL_DIR}/${FMK_NAME}"

# Copies the headers and resources files to the final product folder.
cp -R "${DEVICE_DIR}/Headers/" "${INSTALL_DIR}/Versions/${FMK_VERSION}/Headers/"
cp -R "${DEVICE_DIR}/" "${INSTALL_DIR}/Versions/${FMK_VERSION}/Resources/"

# Copy our python modules for building our resource tree
cp -R "${SRCROOT}/framework/scripts/" "${INSTALL_DIR}/Versions/${FMK_VERSION}/Resources/"

# Removes the binary and header from the resources folder.
rm -r "${INSTALL_DIR}/Versions/${FMK_VERSION}/Resources/Headers" "${INSTALL_DIR}/Versions/${FMK_VERSION}/Resources/${FMK_NAME}"

# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.
lipo -create "${DEVICE_DIR}/${FMK_NAME}" "${SIMULATOR_DIR}/${FMK_NAME}" -output "${INSTALL_DIR}/Versions/${FMK_VERSION}/${FMK_NAME}"


